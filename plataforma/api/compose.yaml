name: store

services:
  
  db:
    image: postgres:latest
    hostname: db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-store}
      POSTGRES_USER: ${POSTGRES_USER:-store}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-store}
    volumes:
      - $VOLUME/postgres/store:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-store} -d ${POSTGRES_DB:-store}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  account:
    hostname: account
    build:
      context: ./account-service
      dockerfile: Dockerfile
    environment:
      DATABASE_HOST: db
      DATABASE_USER: ${POSTGRES_USER:-store}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-store}
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure

  product:
    hostname: product
    build:
      context: ./product-service
      dockerfile: Dockerfile
    environment:
      DATABASE_HOST: db
      DATABASE_USER: ${POSTGRES_USER:-store}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-store}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure

  order:
    hostname: order
    build:
      context: ./order-service
      dockerfile: Dockerfile
    environment:
      DATABASE_HOST: db
      DATABASE_USER: ${POSTGRES_USER:-store}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-store}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      db:
        condition: service_healthy
      product:
        condition: service_started
      account:
        condition: service_started
    restart: on-failure

  auth:
    hostname: auth
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    environment:
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-9FmjT8O3KACNhEDOhhRnfVNQ28xyBc66NR3KBLvllTM=}
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure

  gateway:
    hostname: gateway
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    environment:
      - LOGGING_LEVEL_STORE=${LOGGING_LEVEL_STORE:-debug}
    ports:
      - 8080:8080
    depends_on:
      - account
      - product
      - order
      - auth
    restart: on-failure

  exchange:
    hostname: exchange
    build:
      context: ./exchange-service
      dockerfile: Dockerfile
    env_file:
      - ./exchange-service/.env
    ports:
      - "8000:8000"
    depends_on:
      auth:
        condition: service_started
    restart: on-failure

  redis:
    image: redis:7
    hostname: redis
    ports:
      - 6379:6379
    volumes:
      - $VOLUME/redis:/data
    restart: always

  prometheus:
    image: prom/prometheus:latest
    hostname: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./volume/prometheus:/etc/prometheus
    restart: always

  grafana:
    image: grafana/grafana-enterprise
    hostname: grafana
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - $VOLUME/grafana:/var/lib/grafana
      - $VOLUME/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources      
    restart: always
    depends_on:
      - prometheus